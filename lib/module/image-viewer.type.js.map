{"version":3,"sources":["image-viewer.type.ts"],"names":["React","Image","Text","View","simpleStyle","Props","undefined","saveToLocal","cancel","currentIndex","allSize","createElement","style","count","countText","props","State"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAA6C,cAA7C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAUA,OAAO,MAAMC,KAAN,CAAY;AAAA;AAAA,kCAIO,KAJP;;AAAA,uCASgB,EAThB;;AAAA,2CAce,EAdf;;AAAA,yCAmBa,GAnBb;;AAAA,mCAwBO,CAxBP;;AAAA,6CA6BqBC,SA7BrB;;AAAA,6CAkCiB,OAlCjB;;AAAA,kDAuCsB,EAvCtB;;AAAA,yCA4CU;AACzBC,MAAAA,WAAW,EAAE,mBADY;AAEzBC,MAAAA,MAAM,EAAE;AAFiB,KA5CV;;AAAA,oDAoDyB,IApDzB;;AAAA,6CAyDkB,IAzDlB;;AAAA,mCA2DU,EA3DV;;AAAA,6CAiEkB,KAjElB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,2CAoFgB,KApFhB;;AAAA,6CAyFiB,GAzFjB;;AAAA,6CA+FkB,KA/FlB;;AAAA,yCAoG4B,MAAM,CACjD;AACD,KAtGgB;;AAAA,qCA4Gf,MAAM,CACJ;AACD,KA9Gc;;AAAA,2CAmHoC,MAAM,CACzD;AACD,KArHgB;;AAAA,oCA2HuB,MAAM,CAC5C;AACD,KA7HgB;;AAAA,oCA+H8B,MAAM,CACnD;AACD,KAjIgB;;AAAA,0CAuIf,MAAM;AACJ,aAAO,IAAP;AACD,KAzIc;;AAAA,0CA+If,MAAM;AACJ,aAAO,IAAP;AACD,KAjJc;;AAAA,6CAyJc,CAACC,YAAD,EAAwBC,OAAxB,KAA6C;AAC1E,0BAAOV,KAAK,CAACW,aAAN,CACLR,IADK,EAEL;AAAES,QAAAA,KAAK,EAAER,WAAW,CAACS;AAArB,OAFK,eAGLb,KAAK,CAACW,aAAN,CACET,IADF,EAEE;AAAEU,QAAAA,KAAK,EAAER,WAAW,CAACU;AAArB,OAFF,EAGEL,YAAY,GAAG,GAAf,GAAqBC,OAHvB,CAHK,CAAP;AASD,KAnKgB;;AAAA,yCAyKfK,KAD6D,IAE1D;AACH,0BAAOf,KAAK,CAACW,aAAN,CAAoBV,KAApB,EAA2Bc,KAA3B,CAAP;AACD,KA5KgB;;AAAA,6CAiLwC,MAAM;AAC7D,aAAO,IAAP;AACD,KAnLgB;;AAAA,8CAwLyC,MAAM;AAC9D,aAAO,IAAP;AACD,KA1LgB;;AAAA,yCA+L8B,MAAM,CACnD;AACD,KAjMgB;;AAAA,sCAsMc,MAAM,CACnC;AACD,KAxMgB;;AAAA,yCA6MiB,MAAM,CACtC;AACD,KA/MgB;;AAAA,2CAoNsC,MAAM;AAC3D,aAAO,IAAP;AACD,KAtNgB;;AAAA,4CA2NkC,MAAM,CACvD;AACD,KA7NgB;;AAAA,sCAkO4B,MAAM,CACjD;AACD,KApOgB;;AAAA;AAAA;;AAAA;AAyOnB,OAAO,MAAMC,KAAN,CAAY;AAAA;AAAA,kCAIO,KAJP;;AAAA,8CASkB,CATlB;;AAAA,2CAce,CAdf;;AAAA,yCAmBc,KAnBd;;AAAA,wCAwBkB,EAxBlB;;AAAA,wCA6Ba,KA7Bb;AAAA;;AAAA","sourcesContent":["import * as React from 'react';\nimport { Image, Text, View, ViewStyle } from 'react-native';\nimport { simpleStyle } from './image-viewer.style';\n\ninterface IOnMove {\n  type: string;\n  positionX: number;\n  positionY: number;\n  scale: number;\n  zoomCurrentDistance: number;\n}\n\nexport class Props {\n  /**\n   * 是否显示\n   */\n  public show?: boolean = false;\n\n  /**\n   * 图片数组\n   */\n  public imageUrls: IImageInfo[] = [];\n\n  /**\n   * 滑动到下一页的X阈值\n   */\n  public flipThreshold?: number = 80;\n\n  /**\n   * 当前页能滑到下一页X位置最大值\n   */\n  public maxOverflow?: number = 300;\n\n  /**\n   * 初始显示第几张图\n   */\n  public index?: number = 0;\n\n  /**\n   * 加载失败的图\n   */\n  public failImageSource?: IImageInfo = undefined;\n\n  /**\n   * 背景颜色\n   */\n  public backgroundColor?: string = 'black';\n\n  /**\n   * style props for the footer container\n   */\n  public footerContainerStyle?: object = {};\n\n  /**\n   * Menu Context Values\n   */\n  public menuContext?: any = {\n    saveToLocal: 'save to the album',\n    cancel: 'cancel',\n  };\n\n  /**\n   * 是否开启长按保存到本地的功能\n   */\n  public saveToLocalByLongPress?: boolean = true;\n\n  /**\n   * 是否允许缩放图片\n   */\n  public enableImageZoom?: boolean = true;\n\n  public style?: ViewStyle = {};\n\n  /**\n   * Enable swipe down to close image viewer.\n   * When swipe down, will trigger onCancel.\n   */\n  public enableSwipeDown?: boolean = false;\n\n  /**\n   * threshold for firing swipe down function\n   */\n  public swipeDownThreshold?: number;\n\n  public doubleClickInterval?: number;\n\n  /**\n   * Min and Max scale for zooming\n   */\n  public minScale?: number;\n\n  public maxScale?: number;\n\n  /**\n   * 是否预加载图片\n   */\n  public enablePreload?: boolean = false;\n\n  /**\n   * 翻页时的动画时间\n   */\n  public pageAnimateTime?: number = 100;\n\n  /**\n   * 是否启用原生动画驱动\n   * Whether to use the native code to perform animations.\n   */\n  public useNativeDriver?: boolean = false;\n\n  /**\n   * 长按图片的回调\n   */\n  onLongPress?: (image?: IImageInfo) => void = () => {\n    //\n  };\n\n  /**\n   * 单击回调\n   */\n  public onClick?: (close?: () => any, currentShowIndex?: number) => void =\n    () => {\n      //\n    };\n\n  /**\n   * 双击回调\n   */\n  public onDoubleClick?: (close?: () => any) => void = () => {\n    //\n  };\n\n  /**\n   * 图片保存到本地方法，如果写了这个方法，就不会调取系统默认方法\n   * 针对安卓不支持 saveToCameraRoll 远程图片，可以在安卓调用此回调，调用安卓原生接口\n   */\n  public onSave?: (url: string) => void = () => {\n    //\n  };\n\n  public onMove?: (position?: IOnMove) => void = () => {\n    //\n  };\n\n  /**\n   * 自定义头部\n   */\n  public renderHeader?: (currentIndex?: number) => React.ReactElement<any> =\n    () => {\n      return null as any;\n    };\n\n  /**\n   * 自定义尾部\n   */\n  public renderFooter?: (currentIndex: number) => React.ReactElement<any> =\n    () => {\n      return null as any;\n    };\n\n  /**\n   * 自定义计时器\n   */\n  public renderIndicator?: (\n    currentIndex?: number,\n    allSize?: number\n  ) => React.ReactElement<any> = (currentIndex?: number, allSize?: number) => {\n    return React.createElement(\n      View,\n      { style: simpleStyle.count },\n      React.createElement(\n        Text,\n        { style: simpleStyle.countText },\n        currentIndex + '/' + allSize\n      )\n    );\n  };\n\n  /**\n   * Render image component\n   */\n  public renderImage?: (props: any) => React.ReactElement<any> = (\n    props: any\n  ) => {\n    return React.createElement(Image, props);\n  };\n\n  /**\n   * 自定义左翻页按钮\n   */\n  public renderArrowLeft?: () => React.ReactElement<any> = () => {\n    return null as any;\n  };\n\n  /**\n   * 自定义右翻页按钮\n   */\n  public renderArrowRight?: () => React.ReactElement<any> = () => {\n    return null as any;\n  };\n\n  /**\n   * 弹出大图的回调\n   */\n  public onShowModal?: (content?: any) => void = () => {\n    //\n  };\n\n  /**\n   * 取消看图的回调\n   */\n  public onCancel?: () => void = () => {\n    //\n  };\n\n  /**\n   * function that fires when user swipes down\n   */\n  public onSwipeDown?: () => void = () => {\n    //\n  };\n\n  /**\n   * 渲染loading元素\n   */\n  public loadingRender?: () => React.ReactElement<any> = () => {\n    return null as any;\n  };\n\n  /**\n   * 保存到相册的回调\n   */\n  public onSaveToCamera?: (index?: number) => void = () => {\n    //\n  };\n\n  /**\n   * 当图片切换时触发\n   */\n  public onChange?: (index?: number) => void = () => {\n    //\n  };\n\n  public menus?: ({ cancel, saveToLocal }: any) => React.ReactElement<any>;\n}\n\nexport class State {\n  /**\n   * 是否显示\n   */\n  public show?: boolean = false;\n\n  /**\n   * 当前显示第几个\n   */\n  public currentShowIndex?: number = 0;\n\n  /**\n   * Used to detect if parent component applied new index prop\n   */\n  public prevIndexProp?: number = 0;\n\n  /**\n   * 图片拉取是否完毕了\n   */\n  public imageLoaded?: boolean = false;\n\n  /**\n   * 图片长宽列表\n   */\n  public imageSizes?: IImageSize[] = [];\n\n  /**\n   * 是否出现功能菜单\n   */\n  public isShowMenu?: boolean = false;\n}\n\nexport interface IImageInfo {\n  url: string;\n  /**\n   * 没有的话会自动拉取\n   */\n  width?: number;\n  /**\n   * 没有的话会自动拉取\n   */\n  height?: number;\n  /**\n   * 图片字节大小(kb为单位)\n   */\n  sizeKb?: number;\n  /**\n   * 原图字节大小(kb为单位)\n   * 如果设置了这个字段,并且有原图url,则显示查看原图按钮\n   */\n  originSizeKb?: number;\n  /**\n   * 原图url地址\n   */\n  originUrl?: string;\n  /**\n   * Pass to image props\n   */\n  props?: any;\n  /**\n   * 初始是否不超高 TODO:\n   */\n  freeHeight?: boolean;\n  /**\n   * 初始是否不超高 TODO:\n   */\n  freeWidth?: boolean;\n}\n\nexport interface IImageSize {\n  width: number;\n  height: number;\n  // 图片加载状态\n  status: 'loading' | 'success' | 'fail';\n}\n"]}